name: Deploy React to S3+CloudFront

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      # Build React app
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: 
          npm install
          npm ci 
          npm run build

      # Configure AWS Credentials
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # Terraform Infrastructure
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform-version: 1.6.0

      - name: Terraform Init & Apply
        run: |
          terraform init
          terraform apply -auto-approve
        working-directory: infra
      #checking for debugging the credentials
      - name: Debug AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID is set: ${AWS_ACCESS_KEY_ID:+YES}"
          echo "AWS_SECRET_ACCESS_KEY is set: ${AWS_SECRET_ACCESS_KEY:+YES}"
          echo "AWS_S3_BUCKET is set: ${AWS_S3_BUCKET:+YES}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}

      #checking credentials file
      - name: Check for ~/.aws/credentials file
        run: |
          echo "Checking if AWS credentials file exists..."
          if [ -f ~/.aws/credentials ]; then
            echo "Found ~/.aws/credentials file:"
            cat ~/.aws/credentials
          else
            echo "No ~/.aws/credentials file found."
          fi

      # Upload to S3 using jakejarvis/s3-sync-action (Option 1)
      - name: Deploy to S3
        uses: jakejarvis/s3-sync-action@v0.5.0
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "ap-south-1"
          AWS_SDK_LOAD_CONFIG: false  # Forces SDK to ignore ~/.aws/credentials
          SOURCE_DIR: "build"

      # Invalidate CloudFront Cache
      - name: Invalidate CDN Cache
        run: |
          DIST_ID=$(terraform -chdir=infra output -raw cloudfront_distribution_id)
          aws cloudfront create-invalidation --distribution-id $DIST_ID --paths "/*"

          